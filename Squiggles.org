#+TITLE: Underlines without CG


The new design:

- Instead of =COERROR= tag, we preferably use a =co&errtag= tag to
  match related reading with =&errtag= (for backwards compatibility,
  the =COERROR= tag is still recognised – it has the effect of
  blocking that cohort as being taken as a "main" cohort of the error,
  but doesn't help with matching up readings in case of several
  conflicting error types)

- The =LEFT/RIGHT= relations (also =DELETE=) are used to expand the
  underline of the error, to include several cohorts in one
  replacement suggestion. We expand the underline until it matches the
  relation targets that are furthest away. A matching =&errtag= isn't
  strictly needed here, unless we can have several error types and
  need to keep replacements separate.

- When we have a =DELETE= relation from a reading with an =&errtag=
  and there are be multiple source-cohort error tags, the deletion
  target needs to have a =co&errtag=, so that we only delete in the
  replacement for =&errtag= (not from the replacements for
  =&other-errtag=).

- By default, a cohort's word form is used to construct the
  replacement. So if we have the sentence "we was" where "was" is
  /central/ and tagged =&typo=, and there's a =LEFT= relation to "we",
  then the default replacement if there were no =&SUGGEST= tags would
  simply be the input "we was" (which would be filtered out since it's
  equal, giving no suggestions). If we have a =&SUGGEST= readings
  we→he then we get a "he was" suggestion. But perhaps we also have a
  =&SUGGEST= for was→are for the possible replacment "we are" (tagged
  =&agr=) – but we don't want both of these to apply at the same time
  giving *"we is". In this case, we need to ensure we have
  disambiguating =co&errtype= tags on the =&SUGGEST= readings. T
  
  we also have =&SUGGEST= and co&errtag, but if it does not, then we
  look for &SUGGEST from all readings. The co&errtag is only needed if
  we have alternatives of different errtypes in the same span.

One exception: &SUGGESTWF is currently used to mean that the whole
left/right should be replaced by what's in &SUGGESTWF. In order to not
have to change too many rules, we keep that backwards-compatible, so
if you have a word with &SUGGESTWF, any existing &SUGGEST or word
forms on the other words of the span will be ignored, only the
&SUGGESTWF will be used.



** The problem

Defining underlines/squiggles/error context in CG is hard to
understand and error-prone. Here's a real example rule for the case of
"no space after punctuation":

#+BEGIN_SRC cg
LIST no-space-after-punct-OK-before = ")" ; # «jna.)» is OK

# 1. Add error tag on punctuation
ADD:no-space-after-punct (&no-space-after-punct-mark) TARGET (<NoSpaceAfterPunctMark>)
   IF (T:nextWordCrossSent LINK NOT 0 no-space-after-punct-OK-before)
      (NEGATE 0 (A Arab))
      (NEGATE 0 Sem/Sign LINK 1 Sem/Sign LINK 1 Sem/Sur) ;

# 2. Add error tag + COERROR on the following word (part 1 of extending the blue underline to the following word):
ADD:no-space-after-punct-link (&no-space-after-punct-mark COERROR) TARGET (*)
   IF (T:prevWordCrossSent LINK 0 (&no-space-after-punct-mark) LINK NOT 0 (COERROR)) ;

# 3. Add RIGHT relation on the punctuation (part 2 of extending the blue underline to the following word,
#    also ensures that the correction will replace the word, not be appended to it):
ADDRELATION:no-space-after-punct-rel (RIGHT) (COERROR)
   FROM (T:prevWordCrossSent LINK 0 (<NoSpaceAfterPunctMark>)) ;

# 4. Add suggestions
COPY:no-space-after-punct-sugg ("<$1 $2>"v &SUGGESTWF) TARGET ("<(.*)>"r &no-space-after-punct-mark)
   IF (T:nextWordCrossSent LINK 0 ("<(.*)>"r))
      (NOT 0 (COERROR) OR (&SUGGESTWF));
#+END_SRC

We'd like to be able to *just* put error tags (1. above) and
suggestions (4.) on the word itself in CG, and hand off the job of
figuring out the error context (2. and 3. above) to other modules (the
UI's, or perhaps a special-purpose divvun-squiggle module).

** Easy cases

For the simple case of "we'd like the underline to be bigger so it's
easier to see/click on", this is easy. E.g. if you add an error on
"!!" (where the correction of course is "!"):

#+BEGIN_SRC cg
ADD (&shouty) IF (0 "<!!>");
COPY ("<!>" &SUGGESTWF) TARGET (&shouty);
#+END_SRC

then the UI could just include the word before and after in both the
context and suggestion. The input to UI is:

#+BEGIN_SRC json
{
  "errs": [
    [
      "!",
      12,
      14,
      "no-shouty",
      "Ii!!",
      [
        "!"
      ],
      "shoutyness bad"
    ]
  ],
  "text": "blah gaskkas!! Oahppit ja …\n"
}
#+END_SRC

and the UI just picks the space-delimited words left/right and
underlines =gaskkas!! Oahppit= and suggests =gaskkas! Oahppit=.

** More complicated cases

*** Deleting cohorts, overlapping errors

Currently, it's possible to delete a cohort with e.g.

#+BEGIN_SRC cg
ADD (&errortag) word-to-keep IF (…);
ADDRELATION (DELETE1) (&errortag) TO (2 word-to-be-deleted);
ADD (COERROR &errortag) word-to-be-deleted IF (1 word-to-keep);
#+END_SRC

and =divvun-suggest= will automatically expand the error context to
include the word to be deleted (in the above case, three words will be
marked). No rules in the current sme grammarchecker.cg3 expand the
squiggle further for deletions.

Can we do without the =COERROR &errortag= on the word-to-be-deleted? The
reason it's there is in case of mutually exclusive overlapping errors,
e.g. "dego lávvomuorran" has the suggestions

1. lávvomuorran (deletion)
2. dego lávvomuorra (case change on second word)

where we don't want to suggest "lávvomuorra" (both deletion *and* case
change would make it ungrammatical again), so we mark the deletion as
"belonging to" the delete-reading, so it doesn't get mixed up with the
case-change-reading.

If the DELETE1 relation was from a single reading with an errtag, then
only the replacement matching that source reading could be connected
to the the deletion. But CG always adds the relation to all readings
even if your rule specifies just one, meaning we do need to add tags
=COERROR &errortag= on the relation target to avoid it being deleted
from the other suggestion.

*** Adding cohorts

Currently, both an =&ADDED= tag on the newly added cohort and a =LEFT=
(or =RIGHT=) relation are needed when adding new cohorts:

#+BEGIN_SRC cg
ADDCOHORT ("<dasa>" "dat" Pron Dem Sg Ill &ADDED &dasa-before-fs) BEFORE (&dasa-before-fs) ;
ADDRELATION (LEFT) (&dasa-before-fs) TO (-1 (&ADDED)) ;
#+END_SRC

No rules in the current sme grammarchecker.cg3 expand the squiggle
further for added cohorts. The addition rules don't use =COERROR=, but
perhaps if one were correcting "lávvomuorra" into mutually exclusive
"dego lávvomuorra" or "lávvomuorran" this would be needed?

*** Adding and deleting at the same time

No rules in the current sme grammarchecker.cg3 seem to do this – are
there real examples that wouldn't be solved with just new readings?

*** Adding spaces

The punctuation rules are where the pain is felt the most. We could do
without the =ADD (COERROR &errortag)= and =ADDRELATION (RIGHT)= in the
example from before if we didn't have to expand the squiggle to the
next word in CG:

#+BEGIN_SRC cg
LIST no-space-after-punct-OK-before = ")" ; # «jna.)» is OK

# 1. Add error tag on punctuation
ADD:no-space-after-punct (&no-space-after-punct-mark) TARGET (<NoSpaceAfterPunctMark>)
   IF (T:nextWordCrossSent LINK NOT 0 no-space-after-punct-OK-before)
      (NEGATE 0 (A Arab))
      (NEGATE 0 Sem/Sign LINK 1 Sem/Sign LINK 1 Sem/Sur) ;

# 4. Add suggestions
COPY:no-space-after-punct-sugg ("<$1 >"v &SUGGESTWF) TARGET ("<(.*)>"r &no-space-after-punct-mark)
   IF (NOT 0 (&SUGGESTWF));
#+END_SRC

An example input to the UI would be

#+BEGIN_SRC json
{
  "errs": [
    [
      "!",
      12,
      13,
      "no-space-after-punct-mark",
      "spaces plz",
      [
        "! "
      ],
      "very cramped in here need more space"
    ]
  ],
  "text": "blah gaskkas!Oahppit ja …\n"
}
#+END_SRC

Without expanding the squiggle, we'd just mark the "!" and suggest
"! ", but it would be trivial for the UI to expand that to include the
space-separated substring before and after, giving
"gaskkas!Oahppit"→"gaskkas! Oahppit".

*** Removing spaces

Spaces don't have cohorts, so we can't =&DELETE= them. But we could
have a special tag understood by =divvun-suggest= for deleting spaces,
which would remove the need for =COERROR= rules and relations:

#+BEGIN_SRC cg
COPY:space-after-openparen-sugg (&DELETESPACE-RIGHT) TARGET ("(" &space-after-openparen);
#+END_SRC

The error tag goes on the open parenthesis cohort, which is then given
a reading with the =&DELETESPACE-RIGHT= tag. Then =divvun-suggest=
would add a suggestion that includes the following blank, and we'd get

#+BEGIN_SRC json
{
  "errs": [
    [
      "( ",
      13,
      15,
      "space-after-openparen",
      "no spaces plz",
      [
        "("
      ],
      "too much space"
    ]
  ],
  "text": "blah gaskkas ( Oahppit ja …\n"
}
#+END_SRC

which the UI trivially expands to underline "gaskkas ( Oahppit" etc.

*** Other cases?


** Can/should we have a =divvun-squiggle= module?

Expanding spaces seems like it could be done once and for all on the
back-end, so UI's don't all have to implement the same logic. We could
have a module that turns

#+BEGIN_SRC json
{
  "errs": [
    [
      "!",
      12,
      13,
      "no-space-after-punct-mark",
      "spaces plz",
      [
        "! "
      ],
      "very cramped in here need more space"
    ]
  ],
  "text": "blah gaskkas!Oahppit ja …\n"
}
#+END_SRC

into

#+BEGIN_SRC json
{
  "errs": [
    [
      "gaskkas!Oahppit",
      5,
      20,
      "no-space-after-punct-mark",
      "spaces plz",
      [
        "gaskkas! Oahppit"
      ],
      "very cramped in here need more space"
    ]
  ],
  "text": "blah gaskkas!Oahppit ja …\n"
}
#+END_SRC

and, in future, perhaps have a set of exceptions per error tag
(perhaps we never want to expand simple typos, but always expand
strings < 4 characters). One could then choose whether to run the
pipeline with or without that module, too.

Are there reasons for keeping some of the logic bound to specific UIs?

